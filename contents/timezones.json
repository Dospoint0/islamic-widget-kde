// Improved configGeneral.qml
import QtQuick 2.15
import QtQuick.Controls 2.15
import QtQuick.Layouts 1.15
import org.kde.kirigami 2.20 as Kirigami

Kirigami.FormLayout {
    id: root
    
    // Configuration properties
    property string cfg_country: ""
    property string cfg_city: ""
    property string cfg_timezone: ""
    property alias cfg_fontSize: fontSizeSpinBox.value
    property alias cfg_showArabic: showArabicCheckbox.checked
    property alias cfg_showTranslation: showTranslationCheckbox.checked
    property alias cfg_showHadith: showHadithCheckbox.checked
    property alias cfg_showPrayerTimes: showPrayerTimesCheckbox.checked
    property alias cfg_theme: themeCombo.currentText
    
    //path to timezone json file
    readonly property string timezonesJsonPath: "file:///home/naifl/.local/share/plasma/plasmoids/org.kde.plasma.islamicwidget/contents/timezones.json"
    
    // Debug mode - set to false when done testing
    property bool debugMode: true
    
    // Models
    ListModel { id: countryModel }
    ListModel { id: cityModel }
    ListModel { id: timezoneModel }
    
    // Debug text area (will show at the top when debug mode is enabled)
    TextArea {
        id: debugText
        Layout.fillWidth: true
        height: debugMode ? 120 : 0
        visible: debugMode
        readOnly: true
        wrapMode: TextEdit.WordWrap
        text: "Debug Log:"
        
        function log(message) {
            text = text + "\n" + message;
            console.log(message);
        }
    }
    
    // Country selection
    ComboBox {
        id: countryCombo
        Kirigami.FormData.label: i18nc("@label:listbox", "Country:")
        model: countryModel
        textRole: "text"
        valueRole: "value"
        
        onCurrentIndexChanged: {
            if (currentIndex >= 0 && model.count > 0) {
                var selectedCountry = model.get(currentIndex).value;
                cfg_country = selectedCountry;
                debugText.log("Country changed to: " + selectedCountry);
                loadCities(selectedCountry);
                
                // Reset city selection
                if (cityModel.count > 0) {
                    cityCombo.currentIndex = 0;
                }
            }
        }
    }
    
    // City selection
    ComboBox {
        id: cityCombo
        Kirigami.FormData.label: i18nc("@label:listbox", "City:")
        model: cityModel
        textRole: "text"
        valueRole: "value"
        
        onCurrentIndexChanged: {
            if (currentIndex >= 0 && model.count > 0) {
                cfg_city = model.get(currentIndex).value;
                debugText.log("City changed to: " + cfg_city);
            }
        }
    }
    
    // Timezone selection
    ComboBox {
        id: timezoneCombo
        Kirigami.FormData.label: i18nc("@label:listbox", "Timezone:")
        model: timezoneModel
        textRole: "text"
        
        onCurrentIndexChanged: {
            debugText.log("Timezone index changed to: " + currentIndex);
            if (currentIndex >= 0 && model.count > 0) {
                var item = model.get(currentIndex);
                cfg_timezone = item.identifier;
                debugText.log("cfg_timezone set to: " + cfg_timezone);
            }
        }
    }
    
    // Appearance settings
    SpinBox {
        id: fontSizeSpinBox
        Kirigami.FormData.label: i18nc("@label:spinbox", "Font Size:")
        from: 8
        to: 24
        value: 12
    }
    
    ComboBox {
        id: themeCombo
        Kirigami.FormData.label: i18nc("@label:combobox", "Theme:")
        model: [i18nc("@item:inlistbox", "light"), i18nc("@item:inlistbox", "dark")]
        currentIndex: 0
    }
    
    CheckBox {
        id: showArabicCheckbox
        Kirigami.FormData.label: i18nc("@option:check", "Show Arabic Text:")
        checked: true
    }
    
    CheckBox {
        id: showTranslationCheckbox
        Kirigami.FormData.label: i18nc("@option:check", "Show Translation:")
        checked: true
    }
    
    CheckBox {
        id: showHadithCheckbox
        Kirigami.FormData.label: i18nc("@option:check", "Show Hadith:")
        checked: true
    }
    
    CheckBox {
        id: showPrayerTimesCheckbox
        Kirigami.FormData.label: i18nc("@option:check", "Show Prayer Times:")
        checked: true
    }
    
    // Debug buttons (only visible in debug mode)
    RowLayout {
        Layout.fillWidth: true
        visible: debugMode
        
        Button {
            text: "Refresh Timezones"
            onClicked: {
                debugText.log("Manual refresh of timezones requested");
                loadTimezones();
            }
        }
        
        Button {
            text: "Load Hardcoded"
            onClicked: {
                debugText.log("Loading hardcoded timezones");
                loadHardcodedTimezones();
            }
        }
        
        Button {
            text: "Test Direct JSON"
            onClicked: {
                debugText.log("Testing direct JSON parsing");
                testDirectJsonParsing();
            }
        }
        
        Button {
            text: "Clear Log"
            onClicked: {
                debugText.text = "Debug Log:";
            }
        }
    }
    
    // Component initialization
    Component.onCompleted: {
        debugText.log("Component initialized");
        debugText.log("Initial cfg_country: " + cfg_country);
        debugText.log("Initial cfg_city: " + cfg_city);
        debugText.log("Initial cfg_timezone: " + cfg_timezone);
        debugText.log("Timezones JSON path: " + timezonesJsonPath);
        
        // Load initial data
        loadCountries();
        loadTimezones();
        
        // Set initial selection for country
        if (cfg_country) {
            for (var i = 0; i < countryModel.count; i++) {
                if (countryModel.get(i).value === cfg_country) {
                    countryCombo.currentIndex = i;
                    break;
                }
            }
        } else if (countryModel.count > 0) {
            countryCombo.currentIndex = 0;
        }
        
        // Cities are loaded in the country onCurrentIndexChanged handler
        
        // Set initial timezone selection once timezones are loaded
        Qt.callLater(setInitialTimezone);
    }
    
    // Function to load countries
    function loadCountries() {
        debugText.log("Loading countries");
        countryModel.clear();
        
        // Add sample countries (replace with your data source or API)
        countryModel.append({text: "United States", value: "US"});
        countryModel.append({text: "Canada", value: "CA"});
        countryModel.append({text: "Saudi Arabia", value: "SA"});
        countryModel.append({text: "United Kingdom", value: "GB"});
        countryModel.append({text: "Turkey", value: "TR"});
        
        debugText.log("Loaded " + countryModel.count + " countries");
    }
    
    // Function to load cities based on country
    function loadCities(country) {
        debugText.log("Loading cities for country: " + country);
        cityModel.clear();
        
        // Add cities based on country (replace with your data source)
        if (country === "US") {
            cityModel.append({text: "New York", value: "New York"});
            cityModel.append({text: "Los Angeles", value: "Los Angeles"});
            cityModel.append({text: "Chicago", value: "Chicago"});
            cityModel.append({text: "Phoenix", value: "Phoenix"});
        } else if (country === "CA") {
            cityModel.append({text: "Toronto", value: "Toronto"});
            cityModel.append({text: "Vancouver", value: "Vancouver"});
            cityModel.append({text: "Montreal", value: "Montreal"});
        } else if (country === "SA") {
            cityModel.append({text: "Riyadh", value: "Riyadh"});
            cityModel.append({text: "Jeddah", value: "Jeddah"});
            cityModel.append({text: "Mecca", value: "Mecca"});
            cityModel.append({text: "Medina", value: "Medina"});
        } else if (country === "GB") {
            cityModel.append({text: "London", value: "London"});
            cityModel.append({text: "Manchester", value: "Manchester"});
            cityModel.append({text: "Birmingham", value: "Birmingham"});
        } else if (country === "TR") {
            cityModel.append({text: "Istanbul", value: "Istanbul"});
            cityModel.append({text: "Ankara", value: "Ankara"});
            cityModel.append({text: "Izmir", value: "Izmir"});
        }
        
        debugText.log("Loaded " + cityModel.count + " cities");
    }
    
    // Function to load timezones from JSON file
    function loadTimezones() {
        debugText.log("Loading timezones from: " + timezonesJsonPath);
        
        var xhr = new XMLHttpRequest();
        xhr.timeout = 5000; // 5 second timeout
        
        // Log all state changes
        xhr.onreadystatechange = function() {
            debugText.log("XHR state changed to: " + xhr.readyState + " (Status: " + xhr.status + ")");
            
            if (xhr.readyState !== XMLHttpRequest.DONE) {
                return;
            }
            
            debugText.log("XMLHttpRequest completed with status: " + xhr.status);
            
            if (xhr.status === 200) {
                try {
                    // Log the first part of the response
                    var responseLength = xhr.responseText.length;
                    var responsePreview = xhr.responseText.substring(0, Math.min(50, responseLength)) + 
                                          (responseLength > 50 ? "..." : "");
                    debugText.log("Received response (" + responseLength + " chars): " + responsePreview);
                    
                    var data = JSON.parse(xhr.responseText);
                    debugText.log("Successfully parsed JSON");
                    
                    // Check if it's an array
                    if (Array.isArray(data)) {
                        debugText.log("JSON is an array with " + data.length + " items");
                        
                        // Process timezones
                        timezoneModel.clear();
                        debugText.log("Cleared timezone model");
                        
                        for (var i = 0; i < data.length; i++) {
                            var timezone = data[i];
                            
                            // Skip invalid entries
                            if (!timezone || !timezone.text) {
                                continue;
                            }
                            
                            // Determine the identifier
                            var identifier = "";
                            if (timezone.utc && timezone.utc.length > 0) {
                                identifier = timezone.utc[0];
                            } else {
                                identifier = timezone.value || timezone.text;
                            }
                            
                            timezoneModel.append({
                                text: timezone.text,
                                value: timezone.value || "",
                                identifier: identifier,
                                utcZones: timezone.utc || []
                            });
                            
                            // Log a few as examples
                            if (i < 3 || i === data.length - 1 || i === Math.floor(data.length / 2)) {
                                debugText.log("Added timezone: " + timezone.text + " (" + identifier + ")");
                            }
                        }
                        
                        debugText.log("Loaded " + timezoneModel.count + " timezones");
                        
                        // Set initial timezone
                        Qt.callLater(setInitialTimezone);
                    } else {
                        debugText.log("JSON is not an array. Loading hardcoded timezones as fallback");
                        loadHardcodedTimezones();
                    }
                } catch (e) {
                    debugText.log("Error parsing timezone JSON: " + e);
                    debugText.log("First 100 chars of response: " + xhr.responseText.substring(0, 100));
                    
                    // Load hardcoded data as fallback
                    debugText.log("Loading hardcoded timezones as fallback");
                    loadHardcodedTimezones();
                }
            } else {
                debugText.log("Failed to load timezones.json with status: " + xhr.status);
                debugText.log("Loading hardcoded timezones as fallback");
                loadHardcodedTimezones();
            }
        };
        
        xhr.ontimeout = function() {
            debugText.log("XMLHttpRequest timed out");
            loadHardcodedTimezones();
        };
        
        xhr.onerror = function(e) {
            debugText.log("Network error occurred while fetching timezones.json: " + e);
            debugText.log("Loading hardcoded timezones as fallback");
            loadHardcodedTimezones();
        };
        
        debugText.log("Sending XMLHttpRequest to: " + timezonesJsonPath);
        xhr.open("GET", timezonesJsonPath, true);
        xhr.send();
    }
    
    // Function to load hardcoded timezones (fallback)
    function loadHardcodedTimezones() {
        debugText.log("Loading hardcoded timezones");
        
        timezoneModel.clear();
        
        // Add major timezones as fallback
        timezoneModel.append({
            text: "(UTC-08:00) Pacific Time (US & Canada)",
            value: "Pacific Standard Time",
            identifier: "America/Los_Angeles",
            utcZones: ["America/Los_Angeles"]
        });
        
        timezoneModel.append({
            text: "(UTC-07:00) Mountain Time (US & Canada)",
            value: "Mountain Standard Time",
            identifier: "America/Denver",
            utcZones: ["America/Denver"]
        });
        
        timezoneModel.append({
            text: "(UTC-07:00) Arizona",
            value: "US Mountain Standard Time",
            identifier: "America/Phoenix",
            utcZones: ["America/Phoenix"]
        });
        
        timezoneModel.append({
            text: "(UTC-06:00) Central Time (US & Canada)",
            value: "Central Standard Time",
            identifier: "America/Chicago",
            utcZones: ["America/Chicago"]
        });
        
        timezoneModel.append({
            text: "(UTC-05:00) Eastern Time (US & Canada)",
            value: "Eastern Standard Time",
            identifier: "America/New_York",
            utcZones: ["America/New_York"]
        });
        
        timezoneModel.append({
            text: "(UTC+00:00) London, Dublin",
            value: "GMT Standard Time",
            identifier: "Europe/London",
            utcZones: ["Europe/London"]
        });
        
        timezoneModel.append({
            text: "(UTC+03:00) Istanbul",
            value: "Turkey Standard Time",
            identifier: "Europe/Istanbul",
            utcZones: ["Europe/Istanbul"]
        });
        
        timezoneModel.append({
            text: "(UTC+03:00) Riyadh, Kuwait",
            value: "Arab Standard Time",
            identifier: "Asia/Riyadh",
            utcZones: ["Asia/Riyadh"]
        });
        
        debugText.log("Loaded " + timezoneModel.count + " hardcoded timezones");
        
        // Set initial timezone
        Qt.callLater(setInitialTimezone);
    }
    
    // Function to load hardcoded data for all models (for testing)
    function loadHardcodedData() {
        loadCountries();
        loadHardcodedTimezones();
        if (countryModel.count > 0) {
            countryCombo.currentIndex = 0;
        }
    }
    
    // Alternate function to test direct JSON parsing
    function testDirectJsonParsing() {
        debugText.log("Testing direct JSON parsing");
        
        // First few entries from your provided JSON
        var jsonStr = `[
            {
                "value": "Dateline Standard Time",
                "abbr": "DST",
                "offset": -12,
                "isdst": false,
                "text": "(UTC-12:00) International Date Line West",
                "utc": [
                    "Etc/GMT+12"
                ]
            },
            {
                "value": "UTC-11",
                "abbr": "U",
                "offset": -11,
                "isdst": false,
                "text": "(UTC-11:00) Coordinated Universal Time-11",
                "utc": [
                    "Etc/GMT+11",
                    "Pacific/Midway",
                    "Pacific/Niue",
                    "Pacific/Pago_Pago"
                ]
            },
            {
                "value": "US Mountain Standard Time",
                "abbr": "UMST",
                "offset": -7,
                "isdst": false,
                "text": "(UTC-07:00) Arizona",
                "utc": [
                    "America/Creston",
                    "America/Dawson",
                    "America/Dawson_Creek",
                    "America/Hermosillo",
                    "America/Phoenix",
                    "America/Whitehorse",
                    "Etc/GMT+7"
                ]
            }
        ]`;
        
        try {
            var data = JSON.parse(jsonStr);
            debugText.log("Successfully parsed inline JSON");
            debugText.log("JSON contains " + data.length + " items");
            
            // Process the first few timezones
            timezoneModel.clear();
            
            for (var i = 0; i < data.length; i++) {
                var timezone = data[i];
                var identifier = timezone.utc && timezone.utc.length > 0 ? timezone.utc[0] : timezone.value;
                
                timezoneModel.append({
                    text: timezone.text,
                    value: timezone.value,
                    identifier: identifier,
                    utcZones: timezone.utc
                });
                
                debugText.log("Added timezone: " + timezone.text);
            }
            
            debugText.log("Loaded " + timezoneModel.count + " inline timezones");
            Qt.callLater(setInitialTimezone);
            
        } catch (e) {
            debugText.log("Error parsing inline JSON: " + e);
            loadHardcodedTimezones();
        }
    }
    
    // Function to set initial timezone selection
    function setInitialTimezone() {
        debugText.log("Setting initial timezone selection");
        debugText.log("Current timezone: " + cfg_timezone);
        debugText.log("Timezone model count: " + timezoneModel.count);
        
        if (timezoneModel.count === 0) {
            debugText.log("Timezone model is empty, cannot set selection");
            return;
        }
        
        // Find matching timezone
        var found = false;
        if (cfg_timezone) {
            for (var i = 0; i < timezoneModel.count; i++) {
                var item = timezoneModel.get(i);
                
                // Check all possible ways a timezone could match
                if (item.identifier === cfg_timezone ||
                    item.value === cfg_timezone ||
                    (item.utcZones && item.utcZones.indexOf(cfg_timezone) !== -1)) {
                    debugText.log("Found matching timezone at index " + i + ": " + item.text);
                    timezoneCombo.currentIndex = i;
                    found = true;
                    break;
                }
            }
        }
        
        // Default to first timezone if no match or no configuration
        if (!found) {
            debugText.log("No matching timezone found, defaulting to first timezone");
            if (timezoneModel.count > 0) {
                timezoneCombo.currentIndex = 0;
            }
        }
    }
}